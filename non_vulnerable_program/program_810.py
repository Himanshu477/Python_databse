from scalar import *
from Numeric import array

if 1:
    d=2
    d0=array(d,'i')
    a=3
    c=1
    a1,b1,d1 = foo(a,d0) # b = a + c, a = a + 2, d = d + 3
    
    assert b1==a+c
    assert a1==a+2
    assert d1==d+3
    assert d0==d1

if 1:
    def fun(a):
        return a+2
    a = bar(fun,3)
    assert a==5

    def fun(a):
        return [2,3]
    a = bar(fun,3)
    assert a==2

    def fun(a):
        raise 'fun_error'
    try:
        a = bar(fun,3)
    except 'fun_error':
        pass

    def fun(a):
        if a>2:
            return bar(fun,a-1)
        return a
    a = bar(fun,5)
    assert a==2

    def fun(a):
        if a>2:
            return bar(fun,a-1)
        raise ValueError,'fun_mess'
    try:
        a = bar(fun,5)
    except ValueError,mess:
        assert str(mess)=='fun_mess'

print 'ok'

sys.exit(0)


!%f90
! $Revision: 1.1 $ $Date: 2000/04/26 14:09:32 $

module splines ! in 
  interface
     subroutine curfit(iopt,m,x,y,w,xb,xe,k,s,nest,n,t,c,fp,wrk,lwrk,iwrk,ier) ! in :splines:src/curfit.f
       integer :: iopt=0
       integer optional,check(len(x)>=m,m>k),depend(x,k) :: m=len(x)
       real*8 dimension(m),check(rank(x)==1) :: x
       real*8 dimension(m),check(rank(y)==1,len(y)>=m),depend(m) :: y
       real*8 dimension(m),check(rank(w)==1,len(w)>=m),depend(m) :: w=1
       real*8 depend(x,m):: xb=x[0]
       real*8 depend(x,m):: xe=x[m-1]
       integer check(1<=k,k<=5):: k=3
       real*8 depend(m) :: s=m-sqrt(2*m)
       integer optional,check(len(t)>=nest,nest>=2*k+2),depend(t) :: nest=len(t)
       integer :: n
       real*8 dimension((m/2>2*k+2?m/2:2*k+2)),check(rank(t)==1),depend(m) :: t
       real*8 dimension(nest),check(rank(c)==1,len(c)>=nest),depend(nest) :: c
       real*8 :: fp
       real*8 dimension((m*(k+1)+nest*(7+3*k))),check(rank(wrk)==1,len(wrk)>=(m*(k+1)+nest*(7+3*k))),&
            depend(m,k,nest):: wrk
       integer optional,check(lwrk==len(wrk)),depend(wrk) :: lwrk=len(wrk)
       integer dimension(nest),check(rank(iwrk)==1,len(iwrk)>=nest),depend(nest) :: iwrk
       integer :: ier
       optional iopt,w,k,s,n,lwrk,wrk,iwrk,ier,fp,t,c,xb,xe
       intent(out) k,t,c,ier
     end subroutine curfit
  end interface
end module splines



























































































































































































































































































































































































.f

























































































































rc/fpgrsp.f






























































































































































































splines:src/fppasu.f
















































































wrk,ier) ! in :splines:src/fppogr.f










































k,lwrk,ier) ! in :splines:src/fppola.f







































































) ! in :splines:src/fpregr.f














































































tv,wrk,lwrk,ier) ! in :splines:src/fpspgr.f











































) ! in :splines:src/fpsphe.f






























































wrk,lwrk,ier) ! in :splines:src/fpsurf.f



















































































































































































































































































































































































































































#!/usr/bin/env python

